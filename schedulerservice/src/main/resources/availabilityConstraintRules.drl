
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;
import java.util.*;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit
import com.tracktik.scheduler.configuration.LessThanExpectedHours;
import com.tracktik.scheduler.configuration.MoreThanExpectedHours;
import com.tracktik.scheduler.configuration.MaybeAvailable;
import com.tracktik.scheduler.configuration.NotAvailable;
import com.tracktik.scheduler.configuration.MinimumRestPeriod;


global HardSoftLongScoreHolder scoreHolder;

// HARD CONSTRAINTS

/*
    Given two shifts that have the same employee assigned, we will check of the time slots overlap at all.
    If they do, the employee may not be assigned to one of the shifts. We add a negative hard constraint to
    tell the scheduler not to double book.
*/
rule "CAN_NOT_WORK_SIMULTANEOUS_SHIFTS"
    when
        $shift: Shift(employee != null, $employee : employee, $firstShiftStart: start, $firstShiftEnd: end)
        Shift(this != $shift, employee == $employee, (start <= $firstShiftEnd) && ($firstShiftStart < end))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/*
    If an employee is assigned to a shift and has also requested time off, we add a negative hard score so the
    scheduler will not assign the employee to work during that time off. We are checking to see if the time slot of the
    shift and the time slot of the TimeOff overlap.
*/
rule "TIME_OFF_DURING_SHIFT"
    when
        Shift(employee != null, $employeeId: employee.id, $shiftStart: start, $shiftEnd: end)
        TimeOff($employeeId == employeeId, (start <= $shiftEnd) && ($shiftStart < end))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// SOFT CONSTRAINTS

/*
    This constraint will encourage the scheduler to honor an employee's minimum rest period between shifts.
    It will not fire unless there is a EmployeeConstraintMultiplier fact with the name MINIMUM_REST_PERIOD.
    It adds a soft constraint value that is the square of the hours between the shifts multiplied by the
    constraint multiplier for the particular employee.

    TODO need to check the test cases on this.
*/
rule "MINIMUM_REST_PERIOD"
   when
        Shift(employee != null, $employee: employee, $firstShiftEnd: end)
        EmployeeConstraintMultiplier($employee.id == employeeId, name == "MINIMUM_REST_PERIOD", $employeeMultiplier: multiplier)
        Shift($employee == employee, $firstShiftEnd < start,$secondShiftStart: start, hoursGap($firstShiftEnd, start) < employee.minimumRestPeriod)
    then
        Long hours = hoursGap($firstShiftEnd, $secondShiftStart);
        Double dValue = hours * hours * $employeeMultiplier * -1;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("MRP: " + dValue);
end


/*
    Adds a negative soft constraint value if the employee is scheduled for less than the expected number of hours.
    This rule will fire unless a KeyValueFact of LESS_THAN_EXPECTED_ENABLED of false exists.
    The impact of having less than expected hours is expressed in the KeyValueFact of LESS_THAN_EXPECTED_HOURS_IMPACT.
    Each employee can have a different multiplier which is expressed in the EmployeeConstraintMultiplier of LESS_THAN_EXPECTED_HOURS.

    If enabled, we will total the number of hours for all shifts that the employee is assigned to. If the total hours are less than expected
    we will then compute the percentage of preferred hours. That percentage will be multipled by the impact and the employee's
    multipler and added to the soft score.

    The employee's preferred hours are multiplied by ten to account for fractional ours in Shifts
*/
rule "LESS_THAN_EXPECTED_HOURS"
    when
        $employee : Employee(preferredHours != null, $employeeId: id, $preferredHours: (preferredHours * 100))
        not KeyValueFact(key == "LESS_THAN_EXPECTED_ENABLED", value == false)
        KeyValueFact(key == "LESS_THAN_EXPECTED_HOURS_IMPACT", $impact: ((Long)value))
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "LESS_THAN_EXPECTED_HOURS", $multiplier: multiplier)
        //$totalHours: Long( $preferredHours < longValue) from accumulate (
        $totalHours: Long( longValue < $preferredHours ) from accumulate (
           Shift(employee != null, $employee == employee, $shiftHours: durationHours()),
           sum($shiftHours)
        )
    then
        Long hoursDifference = $preferredHours - $totalHours;
        Double percentage = hoursDifference.doubleValue() / $preferredHours.doubleValue() * 100D;
        Double dValue =  percentage * $impact * $multiplier * -1;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("less than expected hours" + dValue);
end

/*
    Adds a negative soft constraint value if the employee is scheduled for less than the expected number of hours.
    based off of the new configuration object LessThanExpectedHours
    This rule will fire unless a KeyValueFact of LESS_THAN_EXPECTED_ENABLED of false exists.
    The impact of having less than expected hours is expressed in the KeyValueFact of LESS_THAN_EXPECTED_HOURS_IMPACT.
    Each employee can have a different multiplier which is expressed in the EmployeeConstraintMultiplier of LESS_THAN_EXPECTED_HOURS.

    If active, we will total the number of hours for all shifts that the employee is assigned to. If the total hours are less than expected
    we will then compute the percentage of preferred hours. That percentage will be multipled by the impact and the employee's
    multipler and added to the soft score.

    The employee's preferred hours are multiplied by ten to account for fractional hours in Shifts
*/
rule "fewer than expected hours"
    when
        $employee : Employee(preferredHours != null, $employeeId: id, $preferredHours: (preferredHours * 100))
        LessThanExpectedHours(active == true, hardImpact == false, $impact: impact)
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "LESS_THAN_EXPECTED_HOURS", $multiplier: multiplier)
        //$totalHours: Long( $preferredHours < longValue) from accumulate (
        $totalHours: Long( longValue < $preferredHours ) from accumulate (
           Shift(employee != null, $employee == employee, $shiftHours: durationHours()),
           sum($shiftHours)
        )
    then
        Long hoursDifference = $preferredHours - $totalHours;
        Double percentage = hoursDifference.doubleValue() / $preferredHours.doubleValue() * 100D;
        Double dValue =  percentage * $impact * $multiplier * -1;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("less than expected hours" + dValue);
end


/*
    Adds a negative soft constraint value if the employee is schedule for more than the expected number of hours.
    This rule will fire unless a KeyValueFact of MORE_THAN_EXPECTED_ENABLED of false exists.
    The impact of having more than expected hours is expressed in the KeyValueFact of MORE_THAN_EXPECTED_HOURS_IMPACT.
    Each employee can have a different multiplier which is expressed in the EmployeeConstraintMultiplier of MORE_THAN_EXPECTED_HOURS.

    If enabled, we will total the number of hours for all shifts that the employee is assigned to. If the total hours are more than expected
    we will then compute the percentage of preferred hours. That percentage will be multipled by the impact and the employee's
    multipler and added to the soft score.

    The employee's preferred hours are multiplied by ten to account for fractional ours in Shifts
*/
rule "MORE_THAN_EXPECTED_HOURS"
    when

        $employee : Employee(preferredHours != null, $employeeId: id, $preferredHours: (preferredHours * 100))
        not KeyValueFact(key == "MORE_THAN_EXPECTED_ENABLED", value == false)
        KeyValueFact(key == "MORE_THAN_EXPECTED_HOURS_IMPACT", $impact: ((Long)value))
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "MORE_THAN_EXPECTED_HOURS", $multiplier: multiplier)
        $totalHours: Long( longValue > $preferredHours) from accumulate (
           Shift(employee != null, $employee == employee, $shiftHours: durationHours()),
           sum($shiftHours)
        )
    then
        Long hoursDifference = $totalHours - $preferredHours;
        Double percentage = hoursDifference.doubleValue() / $preferredHours.doubleValue() * 100D;
        Double dValue =  percentage * $impact * $multiplier * -1;
        //System.out.println("more than expected hours: " + hoursDifference + " expected: " + $preferredHours + " percentage: " + percentage + " dValue: " + dValue);
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("More than expected hours" + dValue);
end

/*
    Adds a negative soft constraint value if the employee is schedule for more than the expected number of hours.
    based off of the new configuration object LessThanExpectedHours
    This rule will fire unless a KeyValueFact of MORE_THAN_EXPECTED_ENABLED of false exists.
    The impact of having more than expected hours is expressed in the KeyValueFact of MORE_THAN_EXPECTED_HOURS_IMPACT.
    Each employee can have a different multiplier which is expressed in the EmployeeConstraintMultiplier of MORE_THAN_EXPECTED_HOURS.

    If enabled, we will total the number of hours for all shifts that the employee is assigned to. If the total hours are more than expected
    we will then compute the percentage of preferred hours. That percentage will be multipled by the impact and the employee's
    multipler and added to the soft score.

    The employee's preferred hours are multiplied by ten to account for fractional ours in Shifts
*/
rule "more than expected hours"
    when

        $employee : Employee(preferredHours != null, $employeeId: id, $preferredHours: (preferredHours * 100))
        MoreThanExpectedHours(active == true, hardImpact == false, $impact: impact)
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "MORE_THAN_EXPECTED_HOURS", $multiplier: multiplier)
        $totalHours: Long( longValue > $preferredHours) from accumulate (
           Shift(employee != null, $employee == employee, $shiftHours: durationHours()),
           sum($shiftHours)
        )
    then
        Long hoursDifference = $totalHours - $preferredHours;
        Double percentage = hoursDifference.doubleValue() / $preferredHours.doubleValue() * 100D;
        Double dValue =  percentage * $impact * $multiplier * -1;
        //System.out.println("more than expected hours: " + hoursDifference + " expected: " + $preferredHours + " percentage: " + percentage + " dValue: " + dValue);
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("More than expected hours" + dValue);
end


/*
    This will add a negative soft constraint value when the employee is scheduled during a time when they prefer not to work.
    This rule will only fire if there is no KeyValueFact of AVAILABLE_PREF_NO_ENABLED which is false.
    If there is an EmployeeAvailability of NO that overlaps a shift where the employee is assigned we will multiply the
    impact as expressed in the AVAILABLE_PREF_NO_IMPACT by the employee's multiplier for AVAILABILITY_NO and add it to the
    soft score.
*/
rule "AVAILABILITY_NO"
    when
        $availability : EmployeeAvailability($employeeId: employeeId, type == AvailabilityType.NO, $day: dayOfWeek, $employeeStart: startTime, $employeeEnd: endTime)
        Shift(employee != null, $employeeId == employee.id, this.overlaps($availability))
        not KeyValueFact(key == "AVAILABLE_PREF_NO_ENABLED", value == false)
        KeyValueFact(key == "AVAILABLE_PREF_NO_IMPACT", $impact: ((Long)value))
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_NO", $multiplier: multiplier)
    then
        Double dValue = $impact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("availability no" + dValue);
end

/*
    This will add a negative soft constraint value when the employee is scheduled during a time when they prefer not to work.
    This rule based off of the new configuration object NotAvailable
    This rule will only fire if there is no KeyValueFact of AVAILABLE_PREF_NO_ENABLED which is false.
    If there is an EmployeeAvailability of NO that overlaps a shift where the employee is assigned we will multiply the
    impact as expressed in the AVAILABLE_PREF_NO_IMPACT by the employee's multiplier for AVAILABILITY_NO and add it to the
    soft score.
*/
rule "not available"
    when
        $availability : EmployeeAvailability($employeeId: employeeId, type == AvailabilityType.NO, $day: dayOfWeek, $employeeStart: startTime, $employeeEnd: endTime)
        Shift(employee != null, $employeeId == employee.id, this.overlaps($availability))
        NotAvailable(active == true, hardImpact == false, $scoreImpact: scoreImpact)
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_NO", $multiplier: multiplier)
    then
        Double dValue = $scoreImpact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("availability no" + dValue);
end

/*
    This will add a negative soft constraint value when the employee is scheduled during a time when might be able to work.
    This rule will only fire if there is no KeyValueFact of AVAILABLE_PREF_MAYBE_ENABLED which is false.
    If there is an EmployeeAvailability of MAYBE that overlaps a shift where the employee is assigned we will multiply the
    impact as expressed in the AVAILABLE_PREF_MAYBE_IMPACT by the employee's multiplier for AVAILABILITY_MAYBE and add it to the
    soft score.
*/
rule "AVAILABILITY_MAYBE"
    when
        Employee($employeeId: id)
        $availability : EmployeeAvailability($employeeId == employeeId, type == AvailabilityType.MAYBE, $startTime: startTime, $endTime: endTime, $day: dayOfWeek)
        Shift(employee != null, $employeeId == employee.id, this.overlaps($availability))
        not KeyValueFact(key == "AVAILABLE_PREF_MAYBE_ENABLED", value == false)
        KeyValueFact(key == "AVAILABLE_PREF_MAYBE_IMPACT", $impact: ((Long)value))
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_MAYBE", $multiplier: multiplier)
    then
        Double dValue = $impact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("availability maybe" + dValue);
end

/*
    This will add a negative soft constraint value when the employee is scheduled during a time when might be able to work.
    This rule based off of the new configuration object Maybe Available
    If there is an EmployeeAvailability of MAYBE that overlaps a shift where the employee is assigned we will multiply the
    impact as expressed in the AVAILABLE_PREF_MAYBE_IMPACT by the employee's multiplier for AVAILABILITY_MAYBE and add it to the
    soft score.
*/
rule "maybe available"
    when
        Employee($employeeId: id)
        $availability : EmployeeAvailability($employeeId == employeeId, type == AvailabilityType.MAYBE, $startTime: startTime, $endTime: endTime, $day: dayOfWeek)
        Shift(employee != null, $employeeId == employee.id, this.overlaps($availability))
        MaybeAvailable(active == true, $scoreImpact: scoreImpact)
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_MAYBE", $multiplier: multiplier)
    then
        Double dValue = $scoreImpact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
        System.out.println("availability maybe" + dValue);
end

/*
    This will encourage the scheduler no leave gaps of days between assigned shifts. If there is no gap
    a positive 100 will be added to the soft score. If there are gaps, nothing will be added or subtracted. This seems
    to be enough to eliminate the gaps.
*/
rule "CONSECUTIVE_WORK_DAYS"
    when
        Employee($employeeId: id)
        Shift(employee != null, $employeeId == employee.id, $startDate: start.toLocalDate())
        Shift(employee != null, $employeeId == employee.id, start.toLocalDate() == $startDate.minusDays(1L))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 100);
        System.out.println("Consecutive work days: " + 100);
end
