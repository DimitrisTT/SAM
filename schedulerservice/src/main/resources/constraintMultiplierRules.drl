
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;

global HardSoftLongScoreHolder scoreHolder;

/*
    DEFAULTS -- We will insert an EmployeeConstraintMultiplier for these if they don't exist so that we won't have to have two
    sets of rules for each constraint, one with the multiplier and one without. The default multiplier value is 1 so these will
    have no effect unless there is a specific value for the employee that was previosly inserted.
*/

rule "default AVAILABILITY_MAYBE"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_MAYBE")
    then
    //System.out.println("added availabilitymaybe");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("AVAILABILITY_MAYBE"));
end

rule "default CAN_NOT_WORK_SIMULTANEOUS_SHIFTS"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "CAN_NOT_WORK_SIMULTANEOUS_SHIFTS")
    then
    System.out.println("added can not work simultaneous shifts");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("CAN_NOT_WORK_SIMULTANEOUS_SHIFTS"));
end

rule "default AVAILABILITY_NO"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "AVAILABILITY_NO")
    then
    //System.out.println("added availabilityno");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("AVAILABILITY_NO"));
end

rule "default EMPLOYEE_HAS_SENIORITY"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "EMPLOYEE_HAS_SENIORITY")
    then
    System.out.println("added employeehasseniority");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("EMPLOYEE_HAS_SENIORITY"));
end

rule "default HAS_SITE_EXPERIENCE"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "HAS_SITE_EXPERIENCE")
    then
    //System.out.println("added hassiteexperience");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("HAS_SITE_EXPERIENCE"));
end

rule "default HAS_SOME_SOFT_SKILLS"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "HAS_SOME_SOFT_SKILLS")
    then
        //System.out.println("adding default soft skills multiplier");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("HAS_SOME_SOFT_SKILLS"));
end

rule "default LESS_THAN_EXPECTED_HOURS"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "LESS_THAN_EXPECTED_HOURS")
    then
    //System.out.println("added lessthanexpectedhours");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("LESS_THAN_EXPECTED_HOURS"));
end

rule "default MINIMUM_REST_PERIOD"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "MINIMUM_REST_PERIOD")
    then
    //System.out.println("added minimumrestperiod");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("MINIMUM_REST_PERIOD"));
end

rule "default MORE_THAN_EXPECTED_HOURS"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "MORE_THAN_EXPECTED_HOURS")
    then
        //System.out.println("added morethanexpectedhours");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("MORE_THAN_EXPECTED_HOURS"));
end

rule "default OVERTIME_PAY"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "OVERTIME_PAY")
    then
    //System.out.println("added overtimepay");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("OVERTIME_PAY"));
end

rule "default WORKPLACE_CLOSE"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_CLOSE")
    then
    //System.out.println("added workplaceclose");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("WORKPLACE_CLOSE"));
end

rule "default WORKPLACE_FAIRLY_CLOSE"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_FAIRLY_CLOSE")
    then
    //System.out.println("added workplacefairlyclose");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("WORKPLACE_FAIRLY_CLOSE"));
end

rule "default WORKPLACE_FAR"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_FAR")
    then
        //System.out.println("added workplacefar");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("WORKPLACE_FAR"));
end

rule "default CONSECUTIVE_WORK_DAYS"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "CONSECUTIVE_WORK_DAYS")
    then
        //System.out.println("added consecutiveworkdays");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("CONSECUTIVE_WORK_DAYS"));
end

rule "default SCALEFACT"
salience -100
    when
        Employee($employeeId: id)
        not EmployeeConstraintMultiplier($employeeId == employeeId, name == "SCALEFACT")
    then
        //System.out.println("add scalefact");
        insert(new EmployeeConstraintMultiplier().setEmployeeId($employeeId).setName("SCALEFACT"));
end


