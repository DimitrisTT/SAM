
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;
import java.util.*;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit
import com.tracktik.scheduler.configuration.LessThanExpectedHours;
import com.tracktik.scheduler.configuration.MoreThanExpectedHours;
import com.tracktik.scheduler.configuration.MaybeAvailable;
import com.tracktik.scheduler.configuration.NotAvailable;
import com.tracktik.scheduler.configuration.MinimumRestPeriod;
import com.tracktik.scheduler.configuration.CanNotWorkSimultaneousShifts;


global HardSoftLongScoreHolder scoreHolder;

/*
* Rule for Overtime T01 - Scenario 01
* Expected results:
* [[[PayrollCode::HOL], 10.16], [[PayrollCode::REG], 58.76]],
* [[[PayrollCode::HOL], 9], [[PayrollCode::REG], 63.54]],
* [[[PayrollCode::REG], 1.5]],
* On the first holiday he works 10.16 hours
* On the second holiday he works 9 hours
*
*/

rule "holiday hours begin in a shift"
    when
        Employee( $employeeId: id)
        HolidayPeriod($holidayStart: startTimeStamp, $holidayEnd: endTimeStamp)
        Shift( employee != null, employee.id == $employeeId, startTimeStamp < $holidayStart, endTimeStamp < $holidayEnd, $endTimeStamp: endTimeStamp)
    then
        Long lValue = $endTimeStamp - $holidayStart;
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        System.out.println("holiday hours begin in a shift" + lValue);
end

rule "a shift begins in holiday hours"
    when
        Employee( $employeeId: id)
        HolidayPeriod($holidayStart: startTimeStamp, $holidayEnd: endTimeStamp)
        Shift( employee != null, employee.id == $employeeId, $holidayStart < startTimeStamp, $holidayEnd < endTimeStamp, $startTimeStamp: startTimeStamp)
    then
        Long lValue = $holidayEnd - $startTimeStamp;
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        System.out.println("a shift begins in holiday hours" + lValue);
end

rule "a shift lies entirely within holiday hours"
    when
        Employee( $employeeId: id)
        HolidayPeriod($holidayStart: startTimeStamp, $holidayEnd: endTimeStamp)
        Shift( employee != null, employee.id == $employeeId, $holidayStart < startTimeStamp, endTimeStamp < $holidayEnd, $startTimeStamp: startTimeStamp, $endTimeStamp: endTimeStamp)
    then
        Long lValue = $endTimeStamp - $startTimeStamp;
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        System.out.println("a shift lies entirely within holiday hours" + lValue);
end

rule "a shift encompasses holiday hours"
    when
        Employee( $employeeId: id)
        HolidayPeriod($holidayStart: startTimeStamp, $holidayEnd: endTimeStamp)
        Shift( employee != null, employee.id == $employeeId, startTimeStamp < $holidayStart, $holidayEnd < endTimeStamp, $startTimeStamp: startTimeStamp, $endTimeStamp: endTimeStamp)
    then
        Long lValue = $holidayEnd - $holidayStart;
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        System.out.println("a shift encompasses holiday hours" + lValue);
end

