
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;
import java.util.*;

global HardSoftLongScoreHolder scoreHolder;

//The distance is now calculated in Java. The function is left here in case it becomes useful in the future.
function Long calculateDistance(Double geo1_latitude, Double geo1_longitude, Double geo2_latitude, Double geo2_longitude ) {
    Double distance = ((Math.acos(Math.sin(geo1_latitude * Math.PI / 180D) * Math.sin(geo2_latitude * Math.PI / 180D) + Math.cos(geo1_latitude * Math.PI / 180D) * Math.cos(geo2_latitude * Math.PI / 180D) * Math.cos((geo1_longitude - geo2_longitude) * Math.PI / 180D)) * 180 / Math.PI) * 60 * 1.1515D);
    return distance.longValue();
}

/*
    Adds a negative soft value when an employee is assigned to a site that is far from home.
    This rule will only be triggered if enabled with a KeyValueFact of FAR_FROM_SITE_ENABLED.
    The distance that is considered far is defined in a KeyValueFact of FAR_FROM_SITE_DEFINITION.
    The amount that being far from the workplace will impact the score is defined in a KeyValueFact of FAR_FROM_SITE_IMPACT.
    The multiplier that will be applied to the impact is defined in EmployeeConstraintMultiplier since it may differ by employee.
    The distance between an employee and a site is determined ahead of time in a fact called EmployeeSiteDistance.

    Once an employee is assigned to a site, the soft score is computed by multiplying the impact by the multiplier for the employee.
*/
rule "WORKPLACE_FAR"
    when
        not KeyValueFact(key == "FAR_FROM_SITE_ENABLED", value == false)
        KeyValueFact(key == "FAR_FROM_SITE_DEFINITION", $definition: ((Long)value))
        KeyValueFact(key == "FAR_FROM_SITE_IMPACT", $impact: ((Long)value))
        EmployeeSiteDistance($employeeId: employeeId, $siteId: siteId, distance > $definition)
        Shift(employee != null, employee.id == $employeeId, post.site.id ==$siteId )
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_FAR", $multiplier: multiplier)
    then
        Double dValue = $impact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
end

/*
    Adds a negative soft value when an employee is assigned to a site that is fairly close to home.
    This rule will only be triggered if enabled with a KeyValueFact of FAIRLY_FAR_FROM_SITE_ENABLED.
    The distance that is considered fairly close is defined in a KeyValueFact of FAIRLY_FAR_FROM_SITE_DEFINITION.
    The amount that being fairly close to the workplace will impact the score is defined in a KeyValueFact of FAIRLY_FROM_FROM_SITE_IMPACT.
    The multiplier that will be applied to the impact is defined in EmployeeConstraintMultiplier since it may differ by employee.
    The distance between an employee and a site is determined ahead of time in a fact called EmployeeSiteDistance.

    Once an employee is assigned to a site, the soft score is computed by multiplying the impact by the multiplier for the employee.
*/
rule "WORKPLACE_FAIRLY_CLOSE"
    when
        not KeyValueFact(key == "FAIRLY_FAR_FROM_SITE_ENABLED", value == false)
        KeyValueFact(key == "FAIRLY_FAR_FROM_SITE_DEFINITION", $definition: ((Long)value))
        KeyValueFact(key == "FAIRLY_FROM_FROM_SITE_IMPACT", $impact: ((Long)value))
        EmployeeSiteDistance($employeeId: employeeId, $siteId: siteId, distance > $definition)
        Shift(employee != null, employee.id == $employeeId, post.site.id == $siteId )
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_FAIRLY_CLOSE", $multiplier: multiplier)
    then
        Double dValue = $impact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
end

/*
    Adds a negative soft value when an employee is assigned to a site that is close to home.
    This rule will only be triggered if enabled with a KeyValueFact of CLOSE_FROM_SITE_ENABLED.
    The distance that is considered close is defined in a KeyValueFact of CLOSE_FROM_SITE_DEFINITION.
    The amount that being close to the workplace will impact the score is defined in a KeyValueFact of CLOSE_FROM_SITE_IMPACT.
    The multiplier that will be applied to the impact is defined in EmployeeConstraintMultiplier since it may differ by employee.
    The distance between an employee and a site is determined ahead of time in a fact called EmployeeSiteDistance.

    Once an employee is assigned to a site, the soft score is computed by multiplying the impact by the multiplier for the employee.
*/
rule "WORKPLACE_CLOSE"
    when
        not KeyValueFact(key == "CLOSE_FROM_SITE_ENABLED", value == false)
        KeyValueFact(key == "CLOSE_FROM_SITE_DEFINITION", $definition: ((Long)value))
        KeyValueFact(key == "CLOSE_FROM_SITE_IMPACT", $impact: ((Long)value))
        EmployeeSiteDistance($employeeId: employeeId, $siteId: siteId, distance <= $definition)
        Shift(employee != null, employee.id == $employeeId, post.site.id == $siteId )
        EmployeeConstraintMultiplier($employeeId == employeeId, name == "WORKPLACE_CLOSE", $multiplier: multiplier)
    then
        Double dValue = $impact * $multiplier;
        scoreHolder.addSoftConstraintMatch(kcontext, dValue.longValue());
end
