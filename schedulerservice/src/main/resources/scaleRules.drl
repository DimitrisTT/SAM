
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
//import com.tracktik.scheduler.domain.Employee;
//import com.tracktik.scheduler.domain.ScaleFact;
//import com.tracktik.scheduler.domain.Scale;
//import com.tracktik.scheduler.domain.ScaleType;
//import com.tracktik.scheduler.domain.ScaleTag;
//import com.tracktik.scheduler.domain.Impact;
//import com.tracktik.scheduler.domain.Shift;
//import com.tracktik.scheduler.domain.Post;
//import com.tracktik.scheduler.domain.EmployeeConstraintMultiplier;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;
import java.util.*;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit


global HardSoftLongScoreHolder scoreHolder;


// Scale Fact Level

rule "scale fact level is below employee level and impact is squared"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.LEVEL, impact.square == true ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * difference * $scaleFact.impact.impact * -1);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with squared diff value: " + lValue);
end

rule "scale fact level is below employee level and impact is linear"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.LEVEL, impact.square == false ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $employeeScale.rating - $scaleFact.rating;
        Long lValue = (difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with value: " + lValue);
end

rule "scale fact delta is below employee delta and impact is squared"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.DELTA, impact.square == true ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * difference * $scaleFact.impact.impact * -1);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with squared diff value: " + lValue);
end

rule "scale fact delta is below employee delta and impact is linear"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.DELTA, impact.square == false ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $employeeScale.rating - $scaleFact.rating;
        Long lValue = (difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with value: " + lValue);
end

rule "scale fact delta is above employee delta and impact is squared"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.DELTA, impact.square == true ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating > $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * difference * $scaleFact.impact.impact * -1);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with squared diff value: " + lValue);
end

rule "scale fact delta is above employee delta and impact is linear"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.DELTA, impact.square == false ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating > $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with value: " + lValue);
end

rule "scale fact nps is below employee nps and impact is squared"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.NPS, impact.square == true ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * difference * $scaleFact.impact.impact * -1);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with squared diff value: " + lValue);
end

rule "scale fact nps is below employee nps and impact is linear"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.NPS, impact.square == false ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating < $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $employeeScale.rating - $scaleFact.rating;
        Long lValue = (difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with value: " + lValue);
end

rule "scale fact nps is above employee nps and impact is squared"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.NPS, impact.square == true ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating > $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $scaleFact.rating - $employeeScale.rating;
        Long lValue = (difference * difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with squared diff value: " + lValue);
end

rule "scale fact NPS is above employee NPS and impact is linear"
dialect "mvel"
    when
        Shift(post != null, employee != null, $employee: employee, $post: post)
        $scaleFact: ScaleFact( scaleType == ScaleType.NPS, impact.square == false ) from $post.scaleFacts
        $employeeScale: Scale( scaleTag == $scaleFact.scaleTag, rating > $scaleFact.rating) from $employee.scales
        $ecm: EmployeeConstraintMultiplier(employeeId == $employee.id, alreadyFired == false, name == "SCALEFACT")
    then
        int difference = $employeeScale.rating - $scaleFact.rating;
        Long lValue = (difference * $scaleFact.impact.impact);
        scoreHolder.addSoftConstraintMatch(kcontext, lValue);
        $ecm.setAlreadyFired(true);
        update($ecm);
        //System.out.println("The scale fact level rule fired for employee: " + $employee.id + " with value: " + lValue);
end