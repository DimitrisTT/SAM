
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import com.tracktik.scheduler.service.*;
import java.util.*;

global HardSoftLongScoreHolder scoreHolder;

// HARD CONSTRAINTS

/*
    This is a hard constraint to prevent an employee from being assigned to a site where
    they have been banned. It will find the Site ID from the shift and check to see if
    there is also a SiteBan for that employee with the same Site ID.
*/
rule "BANNED_FROM_SITE"
    when
        Shift(employee != null, $employeeId: employee.id, $siteId: post.site.id)
        SiteBan($employeeId == employeeId, $siteId == siteId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// SOFT CONSTRAINTS

rule "SHIFT_TAG"
    when
        Shift(employee != null, employee.hasShiftTags(tags), $value: employee.tagValueSummary(tags))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $value);
        System.out.println("Shift-Tag" + $value);
end

/*
    For each post in an assigned shift, we look a the bill rate, subtract the pay rate and then
    divide by 100. We have previously multiplied the rates by 100 to avoid floating point arithmetic.

   TODO This rule needs to be fixed as it isn't considering the pay rate of the assigned employee.
*/
/*
rule "MAXIMIZE_PROFIT"
    when
        Shift($post: post)
        Post(this == $post, $billRate: billRate, $payRate: payRate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($billRate - $payRate)/100L);
        System.out.println("Maximize Profit" + ($billRate - $payRate)/100L);
end
*/
