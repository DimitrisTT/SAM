
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import java.util.Arrays;
import java.time.*;
import java.time.temporal.ChronoUnit;

global HardSoftLongScoreHolder scoreHolder;

function Long hoursGap(LocalDateTime time1, LocalDateTime time2) {
    return Duration.between(time1, time2).get(ChronoUnit.HOURS);
}

function Long matches(Collection first, Collection other) {
    return first.stream().filter(item -> other.includes(item)).count();
}

rule "employee can not work two shifts at same time"
    when
        Shift($employee : employee, $timeSlot : timeSlot, employee != null)
        Shift(employee == $employee, timeSlot.getEnd() >= $timeSlot.getStart())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "employee must have hard skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post,  !$skills.containsAll(hardSkills))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "there must be 8 hour gap between shifts"
    when
        Shift($employee: employee, $timeSlot: timeSlot)
        Shift($employee == employee, $timeSlot.getEnd() < timeSlot.getStart(), hoursGap($timeSlot.getEnd(), timeSlot.getStart()) < 8L)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "has some requested soft skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post,  $matches = matches(softSkills, $skills))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $matches * $matches);
end