
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import java.util.*;
import java.time.*;

global HardSoftLongScoreHolder scoreHolder;

function Long numberOfMatches(Collection first, Collection other) {
    return first.stream().filter(item -> other.contains(item)).count();
}

rule "employee can not work two shifts at same time"
    when
        $shift: Shift($employee : employee, $timeSlot : timeSlot, employee != null)
        Shift(this != $shift, employee == $employee,  timeSlot.overlaps($timeSlot, 8))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "employee must have hard skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post,  !$skills.containsAll(hardSkills))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/*rule "there must be 8 hour gap between shifts"
   when
        Shift($employee: employee, $firstShiftEnd: timeSlot.getEnd())
        Shift($employee == employee, hoursGap($firstShiftEnd, timeSlot.getStart()) < 8L)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end*/

rule "has some requested soft skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post, $softSkills: softSkills , numberOfMatches(softSkills, $skills) > 0 )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, numberOfMatches($softSkills, $skills) * 50 );
end

rule "add cost data"
    when
        $employee: Employee()
        accumulate(
            Shift(employee == $employee, $hours: hours, $post: post) and Post(this == $post, $billRate: billRate, $payRate: payRate);
            $totalHours: sum($hours),
            $totalCost: sum($payRate * $hours),
            $totalBilled: sum($billRate * $hours)
        )
     then
     insertLogical(new CostTotals($employee, $totalHours, $totalBilled.longValue(), $totalCost.longValue() ));
end

rule "non overtime margin"
    when
       CostTotals($margin: totalCost - totalBilled)

    then
       scoreHolder.addSoftConstraintMatch(kcontext, $margin / 100 );
end

rule "overtime pay"
    when
       CostTotals(hours>40, $otHours: hours - 40, $weightedCost: totalCost/hours) //might have to do rounding instead of truncate

    then
       scoreHolder.addSoftConstraintMatch(kcontext, - ($otHours * $weightedCost / 2)  / 100 );
end

/*rule "maximize profit"
    when
        Shift($post: post, $timeSlot : timeSlot)
        Post(this == $post, $billRate: billRate, $payRate: payRate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($billRate - $payRate)/100L);
end*/

rule "minimum availability preference"
    when

        $employee : Employee($preferredHours: preferredHours)
        $totalHours: Long() from accumulate (
           Shift($employee == employee, $shiftHours: timeSlot.getDurationHours()),
           sum($shiftHours)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -(($totalHours - $preferredHours) * ($totalHours - $preferredHours)));
end

rule "has site experience"
    when
        $employee: Employee($sites: siteExperience)
        Shift($post: post, $employee == employee)
        Post(this == $post, site not memberOf  $sites )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100);
end