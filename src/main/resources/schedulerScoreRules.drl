
import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;
import com.tracktik.scheduler.domain.*;
import java.util.*;
import java.time.*;
import java.time.temporal.ChronoUnit;

global HardSoftLongScoreHolder scoreHolder;

function Long hoursGap(LocalDateTime time1, LocalDateTime time2) {
    return Duration.between(time1, time2).get(ChronoUnit.HOURS);
}

function Long numberOfMatches(Collection first, Collection other) {
    return first.stream().filter(item -> other.contains(item)).count();
}

rule "employee can not work two shifts at same time"
    when
        Shift($employee : employee, $timeSlot : timeSlot, employee != null)
        Shift(employee == $employee, timeSlot.getEnd() >= $timeSlot.getStart())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "employee must have hard skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post,  !$skills.containsAll(hardSkills))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "there must be 8 hour gap between shifts"
    when
        Shift($employee: employee, $firstShiftEnd: timeSlot.getEnd())
        Shift($employee == employee, $firstShiftEnd < timeSlot.getStart(), $nextShiftStart: timeSlot.getStart())
    then
        scoreHolder.addHardConstraintMatch(kcontext, hoursGap($firstShiftEnd, $nextShiftStart) < 8L ? -1 : 0);
end

rule "has some requested soft skills"
    when
        $employee: Employee($skills: skills)
        Shift($post: post, $employee == employee)
        Post(this == $post, $softSkills: softSkills)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, numberOfMatches($softSkills, $skills) * numberOfMatches($softSkills, $skills));
end

rule "maximize profit"
    when
        $employee: Employee($cost: cost)
        Shift($post: post, $employee == employee, $timeSlot : timeSlot)
        Post(this == $post, $billRate: billRate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($billRate - $cost) * ($billRate - $cost) * (($billRate - $cost) < 0 ? -1 : 1));
end

rule "minimum availability preference"
    when

        $employee : Employee($preferredHours: preferredHours)
        $totalHours: Long() from accumulate (
           Shift($employee == employee, $shiftHours: timeSlot.getDurationHours()),
           sum($shiftHours)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -(($totalHours - $preferredHours) * ($totalHours - $preferredHours)));
end

rule "has site experience"
    when
        $employee: Employee($sites: siteExperience)
        Shift($post: post, $employee == employee)
        Post(this == $post, $site: site)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $sites.contains($site) ? 0 : -100);
end